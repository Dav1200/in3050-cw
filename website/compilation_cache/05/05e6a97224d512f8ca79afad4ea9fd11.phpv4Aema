<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\CoreExtension;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;
use Twig\TemplateWrapper;

/* staffportal/service.html */
class __TwigTemplate_e2e9da49c09e94afd28e12232cf1f66a extends Template
{
    private Source $source;
    /**
     * @var array<string, Template>
     */
    private array $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = []): iterable
    {
        $macros = $this->macros;
        // line 1
        yield "<!DOCTYPE html>
<html lang=\"en\">

<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>";
        // line 7
        yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(($context["pagetitle"] ?? null), "html", null, true);
        yield "</title>
    <link rel=\"stylesheet\" href=\"/public/css/staffportalhub.css\">
</head>

<body>

    ";
        // line 13
        yield Twig\Extension\CoreExtension::include($this->env, $context, "/staffportal/header.html");
        yield "
    <main>
        <h1 class=\"\">Service Management</h1>


        <section class=\"story\">
            <h3>Assigned Services</h3>
            <p style=\"font-size: 1.1em; line-height: 1.6; color: #333;\"></p>
            This section displays the services assigned to the selected date. Use the \"Amend\" button to update service
            details. To view all services, clear the filter. To view services for a specific date, select a date from
            the calendar. To add Service click on 'Add Service' </p>
        </section>
        <section class=\"filter-section\">

            <label for=\"service-date\">Selected Date:</label>
            <input class=\"selecteddate\" type=\"date\" id=\"servicedate\" name=\"service-date\" value=\"";
        // line 28
        yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape($this->extensions['Twig\Extension\CoreExtension']->formatDate(" now", "Y-m-d"), "html", null, true);
        // line 29
        yield "\">

            <button class=\"red-button\" type=\"button\" onclick=\"clearDate()\">Clear Filter</button>
            <button class=\"red-button\" type=\"button\" id=\"openFormdefault\">Setup Default Form</button>

            <button style=\"float: right;\" class=\"red-button\" id=\"openFormBtn\">Add Service</button>

        </section>



        <section>
            <div id=\"serviceFormModal\" class=\"modal\">
                <div class=\"modal-content\">
                    <span class=\"close-btn\">&times;</span>
                    <h2>Create Service</h2>

                    <!-- Form to Add Service -->
                    <form id=\"serviceForm\">
                        <div>
                            <label for=\"service-date\">Service Date:</label>
                            <input type=\"date\" id=\"service-date\" name=\"service-date\" value=\"";
        // line 50
        yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape($this->extensions['Twig\Extension\CoreExtension']->formatDate(" now", "Y-m-d"), "html", null, true);
        // line 51
        yield "\" required>
                        </div>

                        <div>
                            <label for=\"service\">Service Status:</label>
                            <select id=\"service\" name=\"service\" required>
                                <option value=\"Breakfast\">Breakfast</option>
                                <option value=\"Lunch\">Lunch</option>
                                <option value=\"Dinner\">Dinner</option>
                            </select>
                        </div>

                        <div>
                            <label for=\"time-start\">Start Time:</label>
                            <input type=\"time\" id=\"time-start\" name=\"time-start\" required>
                        </div>

                        <div>
                            <label for=\"time-end\">End Time:</label>
                            <input type=\"time\" id=\"time-end\" name=\"time-end\" required>
                        </div>

                        <div>
                            <label for=\"tables-available\">Tables Available:</label>
                            <input type=\"number\" id=\"tables-available\" name=\"tables-available\" min=\"1\" required>
                        </div>

                        <div>
                            <label for=\"service-status\">Service Status:</label>
                            <select id=\"service-status\" name=\"service-status\" required>
                                <option value=\"available\">Available</option>
                                <option value=\"fully booked\">Fully Booked</option>
                                <option value=\"closed\">Closed</option>
                            </select>
                        </div>

                        <button class=\"red-button\" type=\"submit\">Submit</button>



                    </form>
                </div>
            </div>
        </section>
        <section>
            <div id=\"defaultFormModal\" class=\"modal\">
                <div class=\"modal-content\">
                    <span id=\"closebtndefault\" class=\"close-btn\">&times;</span>
                    <h2>Setup Default Service</h2>

                    <!-- Form to Setup Default Service -->
                    <form id=\"defaultServiceForm\">
                        ";
        // line 103
        $context['_parent'] = $context;
        $context['_seq'] = CoreExtension::ensureTraversable(($context["default_services"] ?? null));
        foreach ($context['_seq'] as $context["_key"] => $context["service"]) {
            // line 104
            yield "                        <div>
                            <h3>";
            // line 105
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 105), "html", null, true);
            yield "</h3>
                            <label for=\"";
            // line 106
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 106), "html", null, true);
            yield "-time-start\">Start Time:</label>

                            <input type=\"time\" id=\"";
            // line 108
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 108), "html", null, true);
            yield "-time-start\"
                                name=\"";
            // line 109
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 109), "html", null, true);
            yield "-time-start\" value=\"";
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "time_start", [], "any", false, false, false, 109), "html", null, true);
            yield "\" required>

                            <label for=\"";
            // line 111
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 111), "html", null, true);
            yield "-time-end\">End Time:</label>
                            <input type=\"time\" id=\"";
            // line 112
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 112), "html", null, true);
            yield "-time-end\" name=\"";
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 112), "html", null, true);
            yield "-time-end\"
                                value=\"";
            // line 113
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "time_end", [], "any", false, false, false, 113), "html", null, true);
            yield "\" required>

                            <label for=\"";
            // line 115
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 115), "html", null, true);
            yield "-tables-available\">Tables Available:</label>
                            <input type=\"number\" id=\"";
            // line 116
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 116), "html", null, true);
            yield "-tables-available\"
                                name=\"";
            // line 117
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 117), "html", null, true);
            yield "-tables-available\" min=\"1\"
                                value=\"";
            // line 118
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "tables_available", [], "any", false, false, false, 118), "html", null, true);
            yield "\" required>
                        </div>
                        ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_key'], $context['service'], $context['_parent']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 121
        yield "
                        <button class=\"red-button\" type=\"submit\">Submit</button>

                    </form>

                </div>
            </div>
        </section>

        <section style=\"max-height: 500px; overflow-y: auto;\">
            <table>
                <thead>
                    <tr>
                        <th class=\"id-heading\">ID</th>
                        <th>Service</th>
                        <th>Service Date</th>
                        <th>Start Time</th>
                        <th>End Time</th>
                        <th>Total Tables</th>
                        <th>Tables Booked</th>
                        <th>Status</th>
                        <th>Amend</th>
                    </tr>
                </thead>
                <tbody id=\"serviceListBody\">
                    ";
        // line 146
        $context['_parent'] = $context;
        $context['_seq'] = CoreExtension::ensureTraversable(($context["servicelist"] ?? null));
        foreach ($context['_seq'] as $context["_key"] => $context["service"]) {
            // line 147
            yield "                    <tr id=\"service-row\">
                        <td class=\"id-data\">";
            // line 148
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "id", [], "any", false, false, false, 148), "html", null, true);
            yield "</td>
                        <td>";
            // line 149
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service", [], "any", false, false, false, 149), "html", null, true);
            yield "</td>
                        <td>";
            // line 150
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service_date", [], "any", false, false, false, 150), "html", null, true);
            yield "</td>
                        <td>";
            // line 151
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "time_start", [], "any", false, false, false, 151), "html", null, true);
            yield "</td>
                        <td>";
            // line 152
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "time_end", [], "any", false, false, false, 152), "html", null, true);
            yield "</td>
                        <td>";
            // line 153
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "tables_available", [], "any", false, false, false, 153), "html", null, true);
            yield "</td>
                        <td>";
            // line 154
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "tables_booked", [], "any", false, false, false, 154), "html", null, true);
            yield "</td>
                        <td>";
            // line 155
            yield $this->env->getRuntime('Twig\Runtime\EscaperRuntime')->escape(CoreExtension::getAttribute($this->env, $this->source, $context["service"], "service_status", [], "any", false, false, false, 155), "html", null, true);
            yield "</td>
                        <td><button class=\"amend-button\" onclick=\"amendService(this)\" type=\"button\">Amend</button></td>
                    </tr>
                    ";
        }
        $_parent = $context['_parent'];
        unset($context['_seq'], $context['_key'], $context['service'], $context['_parent']);
        $context = array_intersect_key($context, $_parent) + $_parent;
        // line 159
        yield "                </tbody>
            </table>
        </section>



        <section class=\"story\">
            <h3>Unassigned Services</h3>
            <p style=\"font-size: 1.1em; line-height: 1.6; color: #333;\"></p>
            This section shows the days where services have not been assigned, starting from the current day. It
            displays only future dates with partially or unassigned services. Use the \"Assign Default\" button to quickly
            assign default services to these dates. The default service setup form is located above. </p>
        </section>


        <!-- Table to display unassigned services -->
        <section style=\"max-height: 500px; overflow-y: auto;\">

            <table id=\"service-table\">
                <thead>
                    <tr>
                        <th>Service Date</th>
                        <th>Breakfast</th>
                        <th>Lunch</th>
                        <th>Dinner</th>
                        <th>Assign Default</th>
                    </tr>
                </thead>
                <tbody id=\"table-body\">

                </tbody>
            </table>
        </section>
        <button class=\"red-button\" onclick=\"loadMoreDates()\">Load More</button>


    </main>


</body>

</html>

<script>

    let currentDate = new Date();
    let daysToShow = 7;
    let start = 0;

    function formatDate(date) {
        return date.toISOString().split('T')[0];
    }

    function loadDates() {
        const tableBody = document.getElementById(\"table-body\");
        for (let i = start; i < daysToShow; i++) {
            const newDate = new Date(currentDate);
            newDate.setDate(currentDate.getDate() + i);
            const formattedDate = formatDate(newDate);
            const row = `<tr><td>\${formattedDate}</td><td>BreakFast:Status </td>
                    <td> Lunch:Status </td> <td>Dinner:Status</td> <td><button class=\"assign-default-btn\"  type=\"button\">Assign Default</button></td></tr>`;
            tableBody.innerHTML += row;
        }
    }

    function loadMoreDates() {
        start += 7;
        daysToShow += 7;
        loadDates();
    }


    loadDates();


    console.log(fetchAllServices());


    //fetch services from current date. await will be used to wait for the promise to resolve
    async function fetchAllServices() {
        try {
            const response = await fetch('/staffportal/service/all', {
                method: 'GET',
            });
            const data = await response.json();
            //resolve the promise and return the data
            return data;
        } catch (error) {
            console.error('Error:', error);
        }
    }


    //function to amend the service updates the form.
    function amendService(button) {
        //change the appearance of the form to coresspond to the amend action so we dont have to create a new form. 
        var row = button.parentElement.parentElement;
        var cells = row.getElementsByTagName(\"td\");
        document.querySelector(\"h2\").innerText = \"Update Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Update\";
        // Populate the form with the values from the selected row
        document.getElementById(\"service-date\").value = cells[2].innerText;
        document.getElementById(\"service\").value = cells[1].innerText;
        document.getElementById(\"time-start\").value = cells[3].innerText;
        document.getElementById(\"time-end\").value = cells[4].innerText;
        document.getElementById(\"tables-available\").value = cells[5].innerText;
        document.getElementById(\"service-status\").value = cells[7].innerText;


        //check if there is a delete button already and remove it so we dont override
        var existingDeleteButton = document.getElementById(\"deleteButton\");
        if (existingDeleteButton) {
            existingDeleteButton.remove(); // Remove the existing Delete button
        }

        // create the delete button and add it to the parent class
        var deleteButton = document.createElement(\"button\");
        deleteButton.id = \"deleteButton\"; // Assign a unique ID to the button
        deleteButton.className = \"red-button\"; // Add the desired class for styling
        deleteButton.type = \"button\";
        deleteButton.innerText = \"Delete\";



        //the idea is to add the id of the service to the form so we can use it to update the service, remove it everytime otherwise we will have duplicate id key

        var existingHiddenInput = document.querySelector(\"input[name='id']\");
        if (existingHiddenInput) {
            existingHiddenInput.remove();
        }

        //add the hidden id to the form so it can be used to update
        var hiddenIdInput = document.createElement(\"input\");
        hiddenIdInput.type = \"hidden\";
        hiddenIdInput.name = \"id\";
        hiddenIdInput.value = cells[0].innerText;

        //functionality to call delete service
        deleteButton.onclick = function () {
            deleteService(cells[0].innerText); // Call deleteService function when clicked
        };

        //add child to parent 
        document.getElementById(\"serviceForm\").appendChild(hiddenIdInput);
        document.getElementById(\"serviceForm\").appendChild(deleteButton);
        var modal = document.getElementById(\"serviceFormModal\");
        //close the form
        modal.style.display = \"block\";
    }


    //this function is called when the delete button is clicked to delete the service
    function deleteService(id) {
        //confirms with the staff if they are ready to delete the selected service
        if (!confirm(\"Are you sure you want to delete this service?\")) {
            modal.style.display = \"none\";
            return;
        }
        //create form data to send to the server
        const formData = new FormData();
        formData.append(\"id\", id);
        //post request to delre service
        fetch('/staffportal/service/delete', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.success);
                    searchServiceByDate();
                } else {
                    alert(data.success);
                }

            })
            .catch(error => {
                console.error('Error:', error);
            });
        searchServiceByDate();
        modal.style.display = \"none\";

    }

    function searchServiceByDate() {
        date = document.getElementById(\"servicedate\").value;
        if (date == \"\") {
            date = \"false\";
        }

        fetch(`/staffportal/service/update?date=\${encodeURIComponent(date)}`, {
            method: 'GET',
        })
            .then(response => response.json())
            .then(data => {
                var tableBody = document.getElementById(\"serviceListBody\");

                // Clear the current rows in the table (optional)
                tableBody.innerHTML = '';

                // Loop through the returned data and create new rows dynamically
                data.forEach(service => {
                    var row = document.createElement(\"tr\");
                    row.innerHTML = `
            <td class=\"id-data\">\${service.id}</td>
            <td>\${service.service}</td>
            <td>\${service.service_date}</td>
            <td>\${service.time_start}</td>
            <td>\${service.time_end}</td>
            <td>\${service.tables_available}</td>
            <td>\${service.tables_booked}</td>
            <td>\${service.service_status}</td>
            <td><button class=\"amend-button\" onclick=\"amendService(this)\" type=\"button\">Amend</button></td>
        `;
                    // Append the new row to the table body
                    tableBody.appendChild(row);
                });

            })
            .catch(error => {
                console.error('Error:', error);
            });

    }


    function clearDate() {
        document.getElementById(\"servicedate\").value = \"\";
        searchServiceByDate();
    }



    // Handle form submission
    document.getElementById(\"serviceForm\").addEventListener(\"submit\", function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        //check if button text is submit or update
        var submitBtn = document.querySelector(\"button[type='submit']\");
        //remove the id from the from data as its not required for inserting into db
        console.log(submitBtn.innerText);
        if (submitBtn.innerText == \"Submit\") {
            formData.delete(\"id\");

        }

        //call to post data
        fetch('/staffportal/service/add', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.success);

                } else {
                    alert(data.success);
                }

            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Close the modal after form submission
        searchServiceByDate();
        document.querySelector(\"h2\").innerText = \"Update Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Update\";
        modal.style.display = \"none\";

    });

    //handle default form submission 
    document.getElementById(\"defaultServiceForm\").addEventListener(\"submit\", function (e) {
        //prevent default form submission
        e.preventDefault();
        //create form data to send to the server
        const formData = new FormData(this);
        //post request to service
        fetch('/staffportal/service/defaultform', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    //required as the user should know  if the service was added or not
                    alert(data.success);
                } else {
                    alert(data.success);
                }

            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Close the modal after form submission
        defaultModal.style.display = \"none\";

    });

    // Get the modal and button to open it
    var modal = document.getElementById(\"serviceFormModal\");
    var openBtn = document.getElementById(\"openFormBtn\");
    var closeBtn = document.getElementsByClassName(\"close-btn\")[0];
    const dateSelected = document.getElementById(\"servicedate\");

    //opens the default form modal for services setup
    var defaultModal = document.getElementById(\"defaultFormModal\");
    var openDefaultBtn = document.getElementById(\"openFormdefault\");
    var closeDefaultBtn = document.getElementById(\"closebtndefault\");

    // Open the modal when the button is clicked
    openBtn.onclick = function () {
        modal.style.display = \"block\";
        //cchange heaidng and button text
        document.querySelector(\"h2\").innerText = \"Create Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Submit\";
    }

    // Close the modal when the close button is clicked
    closeBtn.onclick = function () {
        modal.style.display = \"none\";
        document.querySelector(\"h2\").innerText = \"Update Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Update\";
        var existingDeleteButton = document.getElementById(\"deleteButton\");
        if (existingDeleteButton) {
            existingDeleteButton.remove();
        }

    }

    openDefaultBtn.onclick = function () {
        defaultModal.style.display = \"block\";
    }

    closeDefaultBtn.onclick = function () {
        defaultModal.style.display = \"none\";
    }

    // Close the modal if the user clicks anywhere outside the modal
    window.onclick = function (event) {
        if (event.target == modal) {
            defaultModal.style.display = \"none\";
            document.querySelector(\"h2\").innerText = \"Update Service\";
            document.querySelector(\"button[type='submit']\").innerText = \"Update\";
            modal.style.display = \"none\";
            var existingDeleteButton = document.getElementById(\"deleteButton\");
            if (existingDeleteButton) {
                existingDeleteButton.remove(); // Remove the existing Delete button
            }

        }
    }

    dateSelected.addEventListener(\"change\", function () {
        searchServiceByDate();
    });

</script>";
        yield from [];
    }

    /**
     * @codeCoverageIgnore
     */
    public function getTemplateName(): string
    {
        return "staffportal/service.html";
    }

    /**
     * @codeCoverageIgnore
     */
    public function isTraitable(): bool
    {
        return false;
    }

    /**
     * @codeCoverageIgnore
     */
    public function getDebugInfo(): array
    {
        return array (  293 => 159,  283 => 155,  279 => 154,  275 => 153,  271 => 152,  267 => 151,  263 => 150,  259 => 149,  255 => 148,  252 => 147,  248 => 146,  221 => 121,  212 => 118,  208 => 117,  204 => 116,  200 => 115,  195 => 113,  189 => 112,  185 => 111,  178 => 109,  174 => 108,  169 => 106,  165 => 105,  162 => 104,  158 => 103,  104 => 51,  102 => 50,  79 => 29,  77 => 28,  59 => 13,  50 => 7,  42 => 1,);
    }

    public function getSourceContext(): Source
    {
        return new Source("<!DOCTYPE html>
<html lang=\"en\">

<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>{{pagetitle}}</title>
    <link rel=\"stylesheet\" href=\"/public/css/staffportalhub.css\">
</head>

<body>

    {{ include('/staffportal/header.html') }}
    <main>
        <h1 class=\"\">Service Management</h1>


        <section class=\"story\">
            <h3>Assigned Services</h3>
            <p style=\"font-size: 1.1em; line-height: 1.6; color: #333;\"></p>
            This section displays the services assigned to the selected date. Use the \"Amend\" button to update service
            details. To view all services, clear the filter. To view services for a specific date, select a date from
            the calendar. To add Service click on 'Add Service' </p>
        </section>
        <section class=\"filter-section\">

            <label for=\"service-date\">Selected Date:</label>
            <input class=\"selecteddate\" type=\"date\" id=\"servicedate\" name=\"service-date\" value=\"{{ \" now\" |
                date(\"Y-m-d\") }}\">

            <button class=\"red-button\" type=\"button\" onclick=\"clearDate()\">Clear Filter</button>
            <button class=\"red-button\" type=\"button\" id=\"openFormdefault\">Setup Default Form</button>

            <button style=\"float: right;\" class=\"red-button\" id=\"openFormBtn\">Add Service</button>

        </section>



        <section>
            <div id=\"serviceFormModal\" class=\"modal\">
                <div class=\"modal-content\">
                    <span class=\"close-btn\">&times;</span>
                    <h2>Create Service</h2>

                    <!-- Form to Add Service -->
                    <form id=\"serviceForm\">
                        <div>
                            <label for=\"service-date\">Service Date:</label>
                            <input type=\"date\" id=\"service-date\" name=\"service-date\" value=\"{{ \" now\" | date(\"Y-m-d\")
                                }}\" required>
                        </div>

                        <div>
                            <label for=\"service\">Service Status:</label>
                            <select id=\"service\" name=\"service\" required>
                                <option value=\"Breakfast\">Breakfast</option>
                                <option value=\"Lunch\">Lunch</option>
                                <option value=\"Dinner\">Dinner</option>
                            </select>
                        </div>

                        <div>
                            <label for=\"time-start\">Start Time:</label>
                            <input type=\"time\" id=\"time-start\" name=\"time-start\" required>
                        </div>

                        <div>
                            <label for=\"time-end\">End Time:</label>
                            <input type=\"time\" id=\"time-end\" name=\"time-end\" required>
                        </div>

                        <div>
                            <label for=\"tables-available\">Tables Available:</label>
                            <input type=\"number\" id=\"tables-available\" name=\"tables-available\" min=\"1\" required>
                        </div>

                        <div>
                            <label for=\"service-status\">Service Status:</label>
                            <select id=\"service-status\" name=\"service-status\" required>
                                <option value=\"available\">Available</option>
                                <option value=\"fully booked\">Fully Booked</option>
                                <option value=\"closed\">Closed</option>
                            </select>
                        </div>

                        <button class=\"red-button\" type=\"submit\">Submit</button>



                    </form>
                </div>
            </div>
        </section>
        <section>
            <div id=\"defaultFormModal\" class=\"modal\">
                <div class=\"modal-content\">
                    <span id=\"closebtndefault\" class=\"close-btn\">&times;</span>
                    <h2>Setup Default Service</h2>

                    <!-- Form to Setup Default Service -->
                    <form id=\"defaultServiceForm\">
                        {% for service in default_services %}
                        <div>
                            <h3>{{ service.service }}</h3>
                            <label for=\"{{ service.service }}-time-start\">Start Time:</label>

                            <input type=\"time\" id=\"{{ service.service }}-time-start\"
                                name=\"{{ service.service }}-time-start\" value=\"{{service.time_start}}\" required>

                            <label for=\"{{ service.service }}-time-end\">End Time:</label>
                            <input type=\"time\" id=\"{{ service.service }}-time-end\" name=\"{{ service.service }}-time-end\"
                                value=\"{{service.time_end}}\" required>

                            <label for=\"{{ service.service }}-tables-available\">Tables Available:</label>
                            <input type=\"number\" id=\"{{ service.service }}-tables-available\"
                                name=\"{{ service.service }}-tables-available\" min=\"1\"
                                value=\"{{service.tables_available}}\" required>
                        </div>
                        {% endfor %}

                        <button class=\"red-button\" type=\"submit\">Submit</button>

                    </form>

                </div>
            </div>
        </section>

        <section style=\"max-height: 500px; overflow-y: auto;\">
            <table>
                <thead>
                    <tr>
                        <th class=\"id-heading\">ID</th>
                        <th>Service</th>
                        <th>Service Date</th>
                        <th>Start Time</th>
                        <th>End Time</th>
                        <th>Total Tables</th>
                        <th>Tables Booked</th>
                        <th>Status</th>
                        <th>Amend</th>
                    </tr>
                </thead>
                <tbody id=\"serviceListBody\">
                    {% for service in servicelist %}
                    <tr id=\"service-row\">
                        <td class=\"id-data\">{{ service.id }}</td>
                        <td>{{ service.service }}</td>
                        <td>{{ service.service_date }}</td>
                        <td>{{ service.time_start }}</td>
                        <td>{{ service.time_end }}</td>
                        <td>{{ service.tables_available }}</td>
                        <td>{{ service.tables_booked }}</td>
                        <td>{{ service.service_status }}</td>
                        <td><button class=\"amend-button\" onclick=\"amendService(this)\" type=\"button\">Amend</button></td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </section>



        <section class=\"story\">
            <h3>Unassigned Services</h3>
            <p style=\"font-size: 1.1em; line-height: 1.6; color: #333;\"></p>
            This section shows the days where services have not been assigned, starting from the current day. It
            displays only future dates with partially or unassigned services. Use the \"Assign Default\" button to quickly
            assign default services to these dates. The default service setup form is located above. </p>
        </section>


        <!-- Table to display unassigned services -->
        <section style=\"max-height: 500px; overflow-y: auto;\">

            <table id=\"service-table\">
                <thead>
                    <tr>
                        <th>Service Date</th>
                        <th>Breakfast</th>
                        <th>Lunch</th>
                        <th>Dinner</th>
                        <th>Assign Default</th>
                    </tr>
                </thead>
                <tbody id=\"table-body\">

                </tbody>
            </table>
        </section>
        <button class=\"red-button\" onclick=\"loadMoreDates()\">Load More</button>


    </main>


</body>

</html>

<script>

    let currentDate = new Date();
    let daysToShow = 7;
    let start = 0;

    function formatDate(date) {
        return date.toISOString().split('T')[0];
    }

    function loadDates() {
        const tableBody = document.getElementById(\"table-body\");
        for (let i = start; i < daysToShow; i++) {
            const newDate = new Date(currentDate);
            newDate.setDate(currentDate.getDate() + i);
            const formattedDate = formatDate(newDate);
            const row = `<tr><td>\${formattedDate}</td><td>BreakFast:Status </td>
                    <td> Lunch:Status </td> <td>Dinner:Status</td> <td><button class=\"assign-default-btn\"  type=\"button\">Assign Default</button></td></tr>`;
            tableBody.innerHTML += row;
        }
    }

    function loadMoreDates() {
        start += 7;
        daysToShow += 7;
        loadDates();
    }


    loadDates();


    console.log(fetchAllServices());


    //fetch services from current date. await will be used to wait for the promise to resolve
    async function fetchAllServices() {
        try {
            const response = await fetch('/staffportal/service/all', {
                method: 'GET',
            });
            const data = await response.json();
            //resolve the promise and return the data
            return data;
        } catch (error) {
            console.error('Error:', error);
        }
    }


    //function to amend the service updates the form.
    function amendService(button) {
        //change the appearance of the form to coresspond to the amend action so we dont have to create a new form. 
        var row = button.parentElement.parentElement;
        var cells = row.getElementsByTagName(\"td\");
        document.querySelector(\"h2\").innerText = \"Update Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Update\";
        // Populate the form with the values from the selected row
        document.getElementById(\"service-date\").value = cells[2].innerText;
        document.getElementById(\"service\").value = cells[1].innerText;
        document.getElementById(\"time-start\").value = cells[3].innerText;
        document.getElementById(\"time-end\").value = cells[4].innerText;
        document.getElementById(\"tables-available\").value = cells[5].innerText;
        document.getElementById(\"service-status\").value = cells[7].innerText;


        //check if there is a delete button already and remove it so we dont override
        var existingDeleteButton = document.getElementById(\"deleteButton\");
        if (existingDeleteButton) {
            existingDeleteButton.remove(); // Remove the existing Delete button
        }

        // create the delete button and add it to the parent class
        var deleteButton = document.createElement(\"button\");
        deleteButton.id = \"deleteButton\"; // Assign a unique ID to the button
        deleteButton.className = \"red-button\"; // Add the desired class for styling
        deleteButton.type = \"button\";
        deleteButton.innerText = \"Delete\";



        //the idea is to add the id of the service to the form so we can use it to update the service, remove it everytime otherwise we will have duplicate id key

        var existingHiddenInput = document.querySelector(\"input[name='id']\");
        if (existingHiddenInput) {
            existingHiddenInput.remove();
        }

        //add the hidden id to the form so it can be used to update
        var hiddenIdInput = document.createElement(\"input\");
        hiddenIdInput.type = \"hidden\";
        hiddenIdInput.name = \"id\";
        hiddenIdInput.value = cells[0].innerText;

        //functionality to call delete service
        deleteButton.onclick = function () {
            deleteService(cells[0].innerText); // Call deleteService function when clicked
        };

        //add child to parent 
        document.getElementById(\"serviceForm\").appendChild(hiddenIdInput);
        document.getElementById(\"serviceForm\").appendChild(deleteButton);
        var modal = document.getElementById(\"serviceFormModal\");
        //close the form
        modal.style.display = \"block\";
    }


    //this function is called when the delete button is clicked to delete the service
    function deleteService(id) {
        //confirms with the staff if they are ready to delete the selected service
        if (!confirm(\"Are you sure you want to delete this service?\")) {
            modal.style.display = \"none\";
            return;
        }
        //create form data to send to the server
        const formData = new FormData();
        formData.append(\"id\", id);
        //post request to delre service
        fetch('/staffportal/service/delete', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.success);
                    searchServiceByDate();
                } else {
                    alert(data.success);
                }

            })
            .catch(error => {
                console.error('Error:', error);
            });
        searchServiceByDate();
        modal.style.display = \"none\";

    }

    function searchServiceByDate() {
        date = document.getElementById(\"servicedate\").value;
        if (date == \"\") {
            date = \"false\";
        }

        fetch(`/staffportal/service/update?date=\${encodeURIComponent(date)}`, {
            method: 'GET',
        })
            .then(response => response.json())
            .then(data => {
                var tableBody = document.getElementById(\"serviceListBody\");

                // Clear the current rows in the table (optional)
                tableBody.innerHTML = '';

                // Loop through the returned data and create new rows dynamically
                data.forEach(service => {
                    var row = document.createElement(\"tr\");
                    row.innerHTML = `
            <td class=\"id-data\">\${service.id}</td>
            <td>\${service.service}</td>
            <td>\${service.service_date}</td>
            <td>\${service.time_start}</td>
            <td>\${service.time_end}</td>
            <td>\${service.tables_available}</td>
            <td>\${service.tables_booked}</td>
            <td>\${service.service_status}</td>
            <td><button class=\"amend-button\" onclick=\"amendService(this)\" type=\"button\">Amend</button></td>
        `;
                    // Append the new row to the table body
                    tableBody.appendChild(row);
                });

            })
            .catch(error => {
                console.error('Error:', error);
            });

    }


    function clearDate() {
        document.getElementById(\"servicedate\").value = \"\";
        searchServiceByDate();
    }



    // Handle form submission
    document.getElementById(\"serviceForm\").addEventListener(\"submit\", function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        //check if button text is submit or update
        var submitBtn = document.querySelector(\"button[type='submit']\");
        //remove the id from the from data as its not required for inserting into db
        console.log(submitBtn.innerText);
        if (submitBtn.innerText == \"Submit\") {
            formData.delete(\"id\");

        }

        //call to post data
        fetch('/staffportal/service/add', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.success);

                } else {
                    alert(data.success);
                }

            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Close the modal after form submission
        searchServiceByDate();
        document.querySelector(\"h2\").innerText = \"Update Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Update\";
        modal.style.display = \"none\";

    });

    //handle default form submission 
    document.getElementById(\"defaultServiceForm\").addEventListener(\"submit\", function (e) {
        //prevent default form submission
        e.preventDefault();
        //create form data to send to the server
        const formData = new FormData(this);
        //post request to service
        fetch('/staffportal/service/defaultform', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    //required as the user should know  if the service was added or not
                    alert(data.success);
                } else {
                    alert(data.success);
                }

            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Close the modal after form submission
        defaultModal.style.display = \"none\";

    });

    // Get the modal and button to open it
    var modal = document.getElementById(\"serviceFormModal\");
    var openBtn = document.getElementById(\"openFormBtn\");
    var closeBtn = document.getElementsByClassName(\"close-btn\")[0];
    const dateSelected = document.getElementById(\"servicedate\");

    //opens the default form modal for services setup
    var defaultModal = document.getElementById(\"defaultFormModal\");
    var openDefaultBtn = document.getElementById(\"openFormdefault\");
    var closeDefaultBtn = document.getElementById(\"closebtndefault\");

    // Open the modal when the button is clicked
    openBtn.onclick = function () {
        modal.style.display = \"block\";
        //cchange heaidng and button text
        document.querySelector(\"h2\").innerText = \"Create Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Submit\";
    }

    // Close the modal when the close button is clicked
    closeBtn.onclick = function () {
        modal.style.display = \"none\";
        document.querySelector(\"h2\").innerText = \"Update Service\";
        document.querySelector(\"button[type='submit']\").innerText = \"Update\";
        var existingDeleteButton = document.getElementById(\"deleteButton\");
        if (existingDeleteButton) {
            existingDeleteButton.remove();
        }

    }

    openDefaultBtn.onclick = function () {
        defaultModal.style.display = \"block\";
    }

    closeDefaultBtn.onclick = function () {
        defaultModal.style.display = \"none\";
    }

    // Close the modal if the user clicks anywhere outside the modal
    window.onclick = function (event) {
        if (event.target == modal) {
            defaultModal.style.display = \"none\";
            document.querySelector(\"h2\").innerText = \"Update Service\";
            document.querySelector(\"button[type='submit']\").innerText = \"Update\";
            modal.style.display = \"none\";
            var existingDeleteButton = document.getElementById(\"deleteButton\");
            if (existingDeleteButton) {
                existingDeleteButton.remove(); // Remove the existing Delete button
            }

        }
    }

    dateSelected.addEventListener(\"change\", function () {
        searchServiceByDate();
    });

</script>", "staffportal/service.html", "/var/www/html/mounted/website/src/Views/staffportal/service.html");
    }
}
